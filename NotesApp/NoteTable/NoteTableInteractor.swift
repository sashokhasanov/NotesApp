//
//  NoteTableInteractor.swift
//  NotesApp
//
//  Created by Сашок on 14.05.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import CoreData

protocol NoteTableBusinessLogic {
    func fetchNotes()
    
    func addNote()
    
    func deleteNote(request: NoteTable.DeleteNote.Request)
    func pinNote(request: NoteTable.PinNote.Request)
    
    func filterNotes(request: NoteTable.FiletrNotes.Request)
    
    func synchronizeData()
}

protocol NoteTableDataStore {
    func getNumberOfSections() -> Int
    func getNumberOfRowsInSection(_ section: Int) -> Int
    
    func getNote(at indexPath: IndexPath) -> NoteMO
}

class NoteTableInteractor: NSObject, NoteTableBusinessLogic, NoteTableDataStore {
    
    var presenter: NoteTablePresentationLogic?
//    var worker: NoteTableWorker?
    
    private lazy var worker: NoteTableWorker = {
        let persistentContainer = CoreDataStackHolder.shared.persistentContainer
        let worker =
            NoteTableWorker(persistentContainer: persistentContainer, fetchedResultsControllerDelegate: self)
        return worker
    }()
    
    func fetchNotes() {
        worker.fetchNotes()
    }
    
    func addNote() {
        worker.addNote() { indexPath in
            let response = NoteTable.AddNote.Response(newNoteIndexPath: indexPath)
            self.presenter?.presentNewNote(response: response)
        }
    }
    
    func getNumberOfSections() -> Int {
        worker.getNumberOfSections()
    }
    
    func getNumberOfRowsInSection(_ section: Int) -> Int {
        worker.getNumberOfRowsInSection(section)
    }
    
    func getNote(at indexPath: IndexPath) -> NoteMO {
        worker.getNote(at: indexPath)
    }
    
    func deleteNote(request: NoteTable.DeleteNote.Request) {
        worker.deleteNote(at: request.indexPath)
    }
    
    func pinNote(request: NoteTable.PinNote.Request) {
        worker.pinNote(at: request.indexPath)
    }
}

extension NoteTableInteractor: NSFetchedResultsControllerDelegate {
    func controllerWillChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
//        tableView.beginUpdates()
        presenter?.beginUpdates()
    }
    
    func controller(_ controller: NSFetchedResultsController<NSFetchRequestResult>,
                    didChange anObject: Any, at indexPath: IndexPath?, for type: NSFetchedResultsChangeType, newIndexPath: IndexPath?) {
        switch type {
        case .insert:
            if let newIndexPath = newIndexPath {
                presenter?.insertRow(at: newIndexPath)
            }
        case .update:
            if let indexPath = indexPath {
                presenter?.updateRow(at: indexPath)
            }
        case .move:
            if let indexPath = indexPath, let newIndexPath = newIndexPath {
                presenter?.moveRow(from: indexPath, to: newIndexPath)
            }
        case .delete:
            if let indexPath = indexPath {
                presenter?.deleteRow(at: indexPath)
            }
        @unknown default:
            break
        }
    }

    func controllerDidChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
//        tableView.endUpdates()
        presenter?.endUpdates()
    }
    
    func filterNotes(request: NoteTable.FiletrNotes.Request) {
        worker.filterNotes(searchText: request.searchText)
        presenter?.reloadTable()
    }
    
    func synchronizeData() {
        YandexDiskSynchronizatinManager.shared.syncData {
            self.presenter?.endRefreshing()
        }
    }
}
