//
//  NoteDetailsViewController.swift
//  NotesApp
//
//  Created by Сашок on 13.05.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NoteDetailsDisplayLogic: AnyObject {
    func displayNote(viewModel: NoteDetails.ShowNote.ViewModel)
    func updateNoteColor(viewModel: NoteDetails.SetNoteColor.ViewModel)
}

class NoteDetailsViewController: UIViewController {
    
    @IBOutlet weak var noteMarkerView: UIView!
    @IBOutlet weak var noteTitleTextField: UITextField!
    @IBOutlet weak var noteContentTextView: UITextView!
    
    @IBOutlet var colorViews: [CircleMarkerView]!
    @IBOutlet weak var customColorView: GradientMarkerView!
        
    var interactor: NoteDetailsBusinessLogic?
    var router: (NSObjectProtocol & NoteDetailsRoutingLogic & NoteDetailsDataPassing)?
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupViewController()
        getNote()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        let request = NoteDetails.SaveNote.Request(
            title: noteTitleTextField.text ?? "",
            content: noteContentTextView.text ?? ""
        )
        
        interactor?.saveNote(request: request)
    }
    
    
    // MARK: - IBActions
    @IBAction func predefinedColorTapped(_ sender: UITapGestureRecognizer) {
        guard let currentView = sender.view as? CircleMarkerView else {
            return
        }
        
        selectColorView(colorView: currentView)
        
        if let color = currentView.backgroundColor {
            
//            updateNoteMarker(with: color)
            let request = NoteDetails.SetNoteColor.Request(color: color.hexValue)
            interactor?.updateNoteColor(request: request)
            
        } else if currentView is GradientMarkerView {
            showColorPicker(with: nil)
        }
    }
    
    @IBAction func customColorLongPressed(_ sender: UILongPressGestureRecognizer) {
        guard sender.state == .began else {
            return
        }
        showColorPicker(with: customColorView.backgroundColor)
    }
    
    private func showColorPicker(with selectedColor: UIColor?) {
        let colorPickerController = UIColorPickerViewController()
        if let selectedColor = selectedColor {
            colorPickerController.selectedColor = selectedColor
        }
        colorPickerController.delegate = self
        present(colorPickerController, animated: true)
    }
    
    // MARK: Routing
//    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
//        if let scene = segue.identifier {
//            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
//            if let router = router, router.responds(to: selector) {
//                router.perform(selector, with: segue)
//            }
//        }
//    }
    
    private func getNote() {
        interactor?.provideNote()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = NoteDetailsInteractor()
        let presenter = NoteDetailsPresenter()
        let router = NoteDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
}

extension NoteDetailsViewController: NoteDetailsDisplayLogic {
    func displayNote(viewModel: NoteDetails.ShowNote.ViewModel) {
        noteTitleTextField.text = viewModel.title
        noteContentTextView.text = viewModel.content
        setupNoteMarkerColor(color: viewModel.color)
        updateNavigationTitle(isNewNote: viewModel.title.isEmpty && viewModel.content.isEmpty)
    }
    
    func updateNoteColor(viewModel: NoteDetails.SetNoteColor.ViewModel) {
        let color = UIColor(hexValue: viewModel.color)
        updateNoteMarker(with: color)
    }
}
    
extension NoteDetailsViewController {
    
    private func setupNoteMarkerColor(color: Int64) {
        for colorView in colorViews {
            if colorView is GradientMarkerView {
                customColorView.backgroundColor = UIColor(hexValue: color)
            }

            if checkNeedSelectColorView(view: colorView, color: color) {
                selectColorView(colorView: colorView)
                if let color = colorView.backgroundColor {
                    updateNoteMarker(with: color)
                }
                break
            }
        }
    }
    
    private func checkNeedSelectColorView(view: CircleMarkerView, color: Int64) -> Bool {
        guard !(view is GradientMarkerView) else { return true }
        guard let viewColor = view.backgroundColor else { return false }
        
        return color == viewColor.hexValue
    }
    
    private func selectColorView(colorView: CircleMarkerView) {
        for view in colorViews {
            view.showMarker = view === colorView
        }
    }
    
    private func updateNoteMarker(with color: UIColor) {
        UIView.animate(withDuration: 0.3) {
            self.noteMarkerView.backgroundColor = color
        }
    }
    
    private func updateNavigationTitle(isNewNote: Bool) {
//        if (note.title?.isEmpty ?? true) && (note.content?.isEmpty ?? true) {
        if isNewNote {
            navigationItem.title = "Новая заметка"
        } else {
            navigationItem.title = "Редактирование"
        }
    }
}

extension NoteDetailsViewController {
    
    private func setupViewController() {
        noteTitleTextField.delegate = self
        setupNoteContentAccessoryView()
        setupNavigationBar()
    }
    
    private func setupNoteContentAccessoryView() {
        let toolbar = UIToolbar()
        toolbar.sizeToFit()
        
        let flexibleSpaceItem = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: self, action: nil)
        
        let hideKeyboardIcon =
            UIImage(systemName: "keyboard.chevron.compact.down")?.withTintColor(.gray, renderingMode: .alwaysOriginal)
        let hideKeyboardItem =
            UIBarButtonItem(image: hideKeyboardIcon, style: .plain, target: self, action: #selector(hideKeyboard))
        
        toolbar.items = [flexibleSpaceItem, hideKeyboardItem]
        
        noteContentTextView.inputAccessoryView = toolbar
    }
    
    @objc private func hideKeyboard() {
        noteContentTextView.endEditing(true)
    }
    
    private func setupNavigationBar() {
        if let topItem = navigationController?.navigationBar.topItem {
            topItem.backButtonTitle = ""
        }
    }
}

// MARK: - Text field delegate
extension NoteDetailsViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField === noteTitleTextField {
            noteContentTextView.becomeFirstResponder()
        }
        return true
    }
}

// MARK: Color picker view controller delegate
extension NoteDetailsViewController: UIColorPickerViewControllerDelegate {
    func colorPickerViewControllerDidFinish(_ viewController: UIColorPickerViewController) {
//        customColorView.backgroundColor = viewController.selectedColor
        
        let request = NoteDetails.SetNoteColor.Request(color: viewController.selectedColor.hexValue)
        interactor?.updateNoteColor(request: request)
        
//        updateNoteMarker(with: viewController.selectedColor)
    }
}
