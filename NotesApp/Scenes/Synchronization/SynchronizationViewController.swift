//
//  SynchronizationViewController.swift
//  NotesApp
//
//  Created by Сашок on 13.05.2022.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SynchronizationDisplayLogic: AnyObject {
    func displaySynchronizationStatus(viewModel: Synchronization.UpdateStatus.ViewModel)
}

class SynchronizationViewController: UIViewController {
    // MARK: - IBOutlets
    @IBOutlet weak var synchronizationStatusLabel: UILabel!
    @IBOutlet weak var synchronizationStatusImageView: UIImageView!
    @IBOutlet weak var availableActionsLabel: UILabel!
    @IBOutlet weak var synchronizationButton: UIButton!
    
    // MARK: - CleanSwift scene components
    var interactor: SynchronizationBusinessLogic?
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        makeAssembly()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        makeAssembly()
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.updateSynchronizationStatus()
    }
}

// MARK: - IBActions handling
extension SynchronizationViewController {
    @IBAction func synchronizationButtonTapped(_ sender: UIButton) {
        sender.tapAnimation {
            self.interactor?.toggleSynchronization()
        }
    }
}

// MARK: - SynchronizationDisplayLogic protocol conformance
extension SynchronizationViewController: SynchronizationDisplayLogic {
    func displaySynchronizationStatus(viewModel: Synchronization.UpdateStatus.ViewModel) {
        synchronizationStatusImageView.image = UIImage(systemName: viewModel.systemImageName)
        synchronizationStatusLabel.text = viewModel.statusText
        availableActionsLabel.text = viewModel.actionsText
        synchronizationButton.setTitle(viewModel.buttonText, for: .normal)
    }
}

// MARK: - Private methods
extension SynchronizationViewController {
    private func makeAssembly() {
        let viewController = self
        let interactor = SynchronizationInteractor()
        let presenter = SynchronizationPresenter()

        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
}
