//
//  SyncViewController.swift
//  NotesApp
//
//  Created by Сашок on 13.05.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SyncDisplayLogic: AnyObject {
    func displayAuthenticationStatus(viewModel: Sync.UpdateAuthenticationStatus.ViewModel)
}

class SyncViewController: UIViewController {
        
    // MARK: - IBOutlets
    @IBOutlet weak var synchronizationStatusLabel: UILabel!
    @IBOutlet weak var synchronizationStatusImageView: UIImageView!
    @IBOutlet weak var enableSynchronizationElementsStackView: UIStackView!
    @IBOutlet weak var disableSynchronizationElementsStackView: UIStackView!
    
    var interactor: SyncBusinessLogic?
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        makeAssembly()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        makeAssembly()
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        updateSyncStatus()
    }
}

// MARK: - User actions processing
extension SyncViewController {

    
    
    @IBAction func enableSynchronizationButtonTapped(_ sender: UIButton) {
        sender.tapAnimation {
            self.interactor?.enableSync()
        }
    }
    
    @IBAction func disableSynchronizationButtonTapped(_ sender: UIButton) {
        sender.tapAnimation {
            self.interactor?.disableSync()
        }
    }
}

// MARK: - Private methods
extension SyncViewController {
    
    private func makeAssembly() {
        let viewController = self
        let interactor = SyncInteractor()
        let presenter = SyncPresenter()

        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    private func updateSyncStatus() {
        interactor?.updateAuthenticationStatus()
    }
}

// MARK: - SyncDisplayLogic
extension SyncViewController: SyncDisplayLogic {
    func displayAuthenticationStatus(viewModel: Sync.UpdateAuthenticationStatus.ViewModel) {
        updateButtonsVisibility(isAuthenticated: viewModel.isAuthenticated)
        
        synchronizationStatusImageView.image = UIImage(systemName: viewModel.imageName)
        synchronizationStatusLabel.text = viewModel.syncStatus
    }
    
    func updateButtonsVisibility(isAuthenticated: Bool) {
        if isAuthenticated {
            enableSynchronizationElementsStackView.isHidden = true
            disableSynchronizationElementsStackView.isHidden = false
        } else {
            enableSynchronizationElementsStackView.isHidden = false
            disableSynchronizationElementsStackView.isHidden = true
        }
    }
}
